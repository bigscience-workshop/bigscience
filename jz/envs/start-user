# user env start script

# replace stas with the name of your conda env in this script

if [ -z $(type -t module) ]
then
   . /etc/profile.d/z_modules.sh
fi
module purge
module load pytorch-gpu/py3/1.8.0
module load nvtop

# git prompt
export GIT_PROMPT_ONLY_IN_REPO=0;
export GIT_PROMPT_THEME="JZPRod"
source $six_ALL_CCFRWORK/envs/.bash-git-prompt/gitprompt.sh

# We are using common disk spaces for datasets, caches, and experiment dumps:
#
#- Code, cache and datasets -> `$six_ALL_CCFRWORK/cache_dir` and ``$ALL_CCFRWORK/datasets`
#- Experiment dumps -> `$six_ALL_CCFRWORK/EXPERIMENTS`

# SLURM / Account specific settings

# specific caches

export TRANSFORMERS_CACHE=$six_ALL_CCFRWORK/models
export HF_DATASETS_CACHE=$six_ALL_CCFRWORK/datasets
export HF_MODULES_CACHE=$six_ALL_CCFRWORK/modules
export HF_METRICS_CACHE=$six_ALL_CCFRWORK/metrics

#export PYTHONPATH=$WORK/hf/transformers-master/src

export DATASETS_CUSTOM=$six_ALL_CCFRWORK/datasets-custom

# if this session isn't run via a login shell, which is the case when running a
# command which is not shell via ssh, the bash function `module` will be missing.
# so work around it by emulating part of the login shell that loads modules environment
#if [ -z $(type -t module) ]
#then
#   . /etc/profile.d/z_modules.sh
#fi
#module load pytorch-gpu/py3/1.8.0


### CONDA ###

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/gpfslocalsup/pub/anaconda-py3/2020.02/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/gpfslocalsup/pub/anaconda-py3/2020.02/etc/profile.d/conda.sh" ]; then
        . "/gpfslocalsup/pub/anaconda-py3/2020.02/etc/profile.d/conda.sh"
    else
        export PATH="/gpfslocalsup/pub/anaconda-py3/2020.02/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export CONDA_ENVS_PATH=$six_ALL_CCFRWORK/conda
conda activate base
conda activate stas
